[tool.poetry]
name = "rag-powered-microservice"
version = "0.1.0"
description = "A Retrieval-Augmented Generation (RAG) powered microservice using FastAPI, LangChain, and MongoDB"
authors = ["Dominic Thompson <onlythompson@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/rag-powered-microservice"
repository = "https://github.com/yourusername/rag-powered-microservice"
documentation = "https://github.com/yourusername/rag-powered-microservice#readme"
keywords = ["rag", "fastapi", "langchain", "mongodb", "microservice"]

[tool.poetry.dependencies]
python = "^3.8"
fastapi = "^0.68.0"
uvicorn = {extras = ["standard"], version = "^0.15.0"}
langchain = "^0.0.150"
pymongo = {extras = ["srv"], version = "^4.0.1"}
motor = "^3.0.0"
pydantic = {extras = ["email"], version = "^1.9.0"}
python-dotenv = "^0.19.0"
httpx = "^0.23.0"
redis = "^4.3.4"
prometheus-client = "^0.14.1"
opentelemetry-api = "^1.11.1"
opentelemetry-sdk = "^1.11.1"
opentelemetry-exporter-jaeger = "^1.11.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
tenacity = "^8.0.1"
dependency-injector = "^4.40.0"
llm-lingua = "^0.1.0"

[tool.poetry.dev-dependencies]
pytest = "^7.1.3"
pytest-asyncio = "^0.19.0"
black = "^22.8.0"
isort = "^5.10.1"
flake8 = "^5.0.4"
mypy = "^0.971"
pre-commit = "^2.20.0"
pytest-cov = "^3.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.mypy]
python_version = "3.8"
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
ignore_errors = true